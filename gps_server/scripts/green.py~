# import the necessary packages
import argparse
#import imutils
import cv2

 
# construct the argument parse and parse the arguments

"""ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required=True,
	help="path to the input image")
args = vars(ap.parse_args())"""

# define the lower and upper boundaries of the "green"
# ball in the HSV color space
greenLower = (50,50 , 110)
greenUpper = (255, 255, 130)
 
# load the image, convert it to grayscale, blur it slightly,
# and threshold it
#image = cv2.imread(args["image"])
image_original = cv2.imread("current.jpg")
#image = cv2.resize(image, None,fx=2,fy=2,interpolation = cv2.INTER_CUBIC)
image = cv2.resize(image_original, (640,480))

#image = imutils.resize(image, width=600)
#gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
#blurred = cv2.GaussianBlur(gray, (5, 5), 0)
#thresh = cv2.threshold(blurred, 60, 255, cv2.THRESH_BINARY)[1]
# find contours in the thresholded image
#cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL,
#	cv2.CHAIN_APPROX_SIMPLE)
#cnts = cnts[0] if imutils.is_cv2() else cnts[1]


hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

# construct a mask for the color "green", then perform
# a series of dilations and erosions to remove any small
# blobs left in the mask
mask = cv2.inRange(hsv, greenLower, greenUpper)
mask = cv2.erode(mask, None, iterations=2)
mask = cv2.dilate(mask, None, iterations=2)
cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
		cv2.CHAIN_APPROX_SIMPLE)[-2]
center = None
if len(cnts) > 0:
    # find the largest contour in the mask, then use
    # it to compute the minimum enclosing circle and    
    # centroid
    c = max(cnts, key=cv2.contourArea)
    ((x, y), radius) = cv2.minEnclosingCircle(c)
    M = cv2.moments(c)
    center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))
    abhi_area = cv2.contourArea(c)
    print(abhi_area)
    
    if abhi_area>1:
        pixel_x = int(M["m10"]/M["m00"])
	pixel_y = int(M["m01"]/M["m00"])

	pos_x =  pixel_x*(1950/640) 
	pos_y = 1550- pixel_y*(1550/480)
	print(pos_x)
	print(pos_y)
    
    cv2.drawContours(image, [c], -1, (0, 255, 0), 2)
    cv2.circle(image, (pixel_x, pixel_y), 2, (255, 255, 255), -1)
    cv2.putText(image, "center", ( pixel_x, pixel_y),
    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
# loop over the contours
"""for c in cnts:
	# compute the center of the contour
	M = cv2.moments(c)
	if(M["m00"]!=0):
             cX = int(M["m10"] / M["m00"])
            cY = int(M["m01"] / M["m00"])
            print(cX)
            print(cY)
            cv2.circle(image, (500, 500), 10, (255, 255, 255), -1)
            

            
        #find centroid
        else:
            cX,cY=0,0
 
	# draw the contour and center of the shape on the image
	cv2.drawContours(image, [c], -1, (0, 255, 0), 2)
	cv2.circle(image, (cX, cY), 7, (255, 255, 255), -1)
	cv2.putText(image, "center", (cX - 20, cY - 20),
		cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)"""
 
	# show the image
	
cv2.imshow("Image",image)

cv2.waitKey(0)
