#!/usr/bin/env python
import rospy
import serial
from std_msgs.msg import String
import time

import os, sys
from sound_play.msg import SoundRequest
from sound_play.libsoundplay import SoundClient

import baxter_interface.digital_io as DIO
import baxter_interface

import argparse

import cv2
import cv_bridge

from sensor_msgs.msg import (
    Image,
)




#import pi2go, time

#pi2go.init()

#speed=35
#changeInSpeed=25
#lineFollowing=0
outputMessages=0
#lineThreshold=850
#left=0
#center=0 
#right=0
#countL = 0
#countR = 0

'''
ser=serial.Serial(
	port='/dev/ttyUSB0',\
	baudrate=115200,\
	parity=serial.PARITY_NONE,\
	stopbits=serial.STOPBITS_ONE,\
	bytesize=serial.EIGHTBITS,\
		timeout=0)

#ser=serial.Serial('/dev/ttyUSB0', 115200)
#ACM0 9600
'''

'''
def sleep(t):
	try:
		rospy.sleep(t)
	except:
		pass
'''
'''
#13, 12 are wheel encoder sensors
def driveDistanceWhileLineFollowing(counts):
	print 'called drive distance'
	global countL, countR
	countL = 0
	countR = 0
	runL = True
	runR = True
	pi2go.turnForward(speed, speed)
	while runL or runR:
        	time.sleep(0.002)
		if countL == counts:
			stopL()
			runL = False
		if countR == counts:
			stopR()
			runR = False

def changeLanes(side):
	global center
	max_cycles=1000
	no_cycles=0
	turnDelay=0.5
	forwardDelay=0.3
	extraForwardDelay=0.3

	if(side==0):
		print 'change lanes right'
		pi2go.spinRight(speed)
	elif(side==1):
		print 'change lanes left'
		pi2go.spinLeft(speed)
	time.sleep(turnDelay)

	pi2go.forward(speed)
	time.sleep(forwardDelay)

	while 1:
		center= readCenter()
		if(center > lineThreshold):
			print 'found line'
			break
		if(no_cycles>max_cycles):
			print 'took too long'
			break
		time.sleep(0.01)
		no_cycles=no_cycles+1
	time.sleep(extraForwardDelay)
	if(side==0):
		pi2go.spinLeft(speed)
	elif(side==1):
		pi2go.spinRight(speed)
	time.sleep(turnDelay)

	pi2go.stop()
	time.sleep(0.1)



def readLineSensors():
	global ser
	global left
	global center
	global right
	ser.write('0')
        textln=ser.readline()
	try:
        	left=int(ser.readline())
        	center=int(ser.readline())
        	right=int(ser.readline())
		print left
		print center
		print right
	except ValueError:
		pass

def doOneLoopLineFollowing():
	global left
	global center
	global right
	global changeInSpeed
	leftSpeed=0
	rightSpeed=0
	readLineSensors()

	if(center > lineThreshold):
		leftSpeed= speed
		rightSpeed=speed
	elif(left > lineThreshold):
		leftSpeed= speed- changeInSpeed
		rightSpeed=speed+ changeInSpeed
	elif(right > lineThreshold):
		leftSpeed= speed+ changeInSpeed
		rightSpeed=speed- changeInSpeed

	if((center > lineThreshold) and (left > lineThreshold) and (right > lineThreshold)):
		time.sleep(1)
	else:
		pi2go.turnForward(leftSpeed, rightSpeed)
	#time.sleep(0.01)


def outputAMessage():
	global ser
	ser.write('0')
	print('line sensors: ')
        textln=ser.readline()
	print(textln)
        textln=ser.readline()
	print(textln)
        textln=ser.readline()
	print(textln)
        textln=ser.readline()
	print(textln)

'''
def sleep(t):
	try:
        	rospy.sleep(t)
	except KeyboardInterrupt:
		sys.exit()
	except:
		pass


def callback(data):

	#global lineFollowing
	#global outputMessages
	#global speed
	#rospy.loginfo(rospy.get_caller_id() + 'I heard %s', data.data)
	if(data.data=='0'):
        #enable robot
		print '0'
		rs.enable()
	elif(data.data=='1'):
        #disable
 		print '1'
		rs.disable()
	elif(data.data=='2'):
        #head left
 		print '2'
		#baxter_interface.Head().set_pan(-0.9)
		#time.sleep(1)
	elif(data.data=='3'):
        #head right
 		print '3'
		#baxter_interface.Head().set_pan(0.9)
		#time.sleep(0.5)
	elif(data.data=='4'):
        #face happy
 		print '4'
		#pub.publish(happyFace)
		#time.sleep(0.5)

	elif(data.data=='5'):
        #face neutral
 		print '5'
		#face_pub.publish(neutralFace)
		#time.sleep(1)
	elif(data.data=='6'):
        #start line following
 		print '6'
		#limb.move_to_joint_positions(rightArmNeutralPose)
	elif(data.data=='7'):
        #stop line following
 		print '7'
		#lineFollowing=0
		#time.sleep(0.01)
		#pi2go.stop()
	elif(data.data=='9'):
 		print '9'
		#driveDistanceWhileLineFollowing()
	elif(data.data=='a'):
 		print 'a'
		#changeLanes(1)
	elif(data.data=='b'):
 		print 'b'
		#changeLanes(-1)
	elif(data.data=='c'):
 		print 'c'
		#outputMessages=1
	elif(data.data=='d'):
 		print 'd'
		#outputMessages=0
	elif(data.data=='e'):
 		print 'e'
		#speed=speed+10
		#print 'increased speed'
		#print speed
	elif(data.data=='f'):
 		print 'f'
		#speed=speed-10
		#print 'decreased speed'
		#print speed
	time.sleep(0.01)


def listener():
	rospy.init_node('rid_bax', anonymous=True)
	rospy.Subscriber('chatter', String, callback)
	pub= rospy.Publisher('msgFromRobots', String, queue_size=10)	
	r=rospy.Rate(10)
	r.sleep()

	#set up our variables
	b=DIO.DigitalIO('torso_right_button_ok');
	soundhandle = SoundClient()
	notDone = 1
	count = 0

	#for enabling
	rs = baxter_interface.RobotEnable(CHECK_VERSION)

	#for the robot's display
	face_pub = rospy.Publisher('/robot/xdisplay', Image, latch=True, queue_size=1)
	img = cv2.imread("/home/turtlebot/ros_ws/src/baxter_examples/share/images/comm_dep_faces/comm_dep_baxter_4_happy2.png")
	happyFace = cv_bridge.CvBridge().cv2_to_imgmsg(img, encoding="bgr8")
	img = cv2.imread("/home/turtlebot/ros_ws/src/baxter_examples/share/images/comm_dep_faces/comm_dep_baxter_3_neutral2.png")
	neutralFace = cv_bridge.CvBridge().cv2_to_imgmsg(img, encoding="bgr8")
	baxter_interface.Head().set_pan(-0.9)

	while not rospy.is_shutdown():
		#if lineFollowing==1:
			#print '.'
			#doOneLoopLineFollowing()
		#if outputMessages==1:
			#print '+'
			#outputAMessage()
		r.sleep()
		#time.sleep(0.01)
		#rospy.spin()

'''
    	#define right arm poses
	rightArmNeutralPose = {'right_s0': 1.0369710126105396, 'right_s1': -0.1614514779249398, 'right_w0': 0.25579129637989273, 'right_w1': -0.10891263593986437, 'right_w2': 0.0, 'right_e0': 0.04295146206079158, 'right_e1': 1.749121593386343}

	rightArmUpALittlePose = {'right_s0': 1.0062913968528313, 'right_s1': -1.0342865462317403, 'right_w0': 0.25617479157686407, 'right_w1': 0.045252433242619704, 'right_w2': -0.0003834951969713534, 'right_e0': 0.044485442848677, 'right_e1': 2.4470828518742063}

	rightArmSidePose = {'right_s0': -0.22702915660704123, 'right_s1': -1.0484758685196802, 'right_w0': 0.22702915660704123, 'right_w1': -1.292378813793461, 'right_w2': 0.0003834951969713534, 'right_e0': -0.19251458887961942, 'right_e1': 2.2208206856611077}

	rightArmFrontOfferingPose = {'right_s0': 0.6626797003664987, 'right_s1': -1.0381214982014537, 'right_w0': -0.0732475826215285, 'right_w1': -1.3963060121726978, 'right_w2': -0.0003834951969713534, 'right_e0': 0.23584954613738238, 'right_e1': 2.249582825433959}

	limb = baxter_interface.Limb('right')
	angles = limb.joint_angles()
	print angles

	s = '0'

    	#set up robot's initial state just in case
    	pub.publish(neutralFace)
    	sleep(1)
    	baxter_interface.Head().set_pan(0.0)
    	sleep(1)
    	limb.move_to_joint_positions(rightArmNeutralPose)
    	sleep(5)
'''




'''
    #start main loop
    while (not rospy.is_shutdown()):
      #wait until the table has sent us a message
      while ((not rospy.is_shutdown()) and (s[0]=='0')):
        print '.'
        r.sleep()
        f=open('/home/turtlebot/messagesFromTable','r')
        s=f.read()
        f.close()

      if (not rospy.is_shutdown()):_pub
        print 'person has come in front of the robot'
        pub.publish(happyFace)
        #sleep(1)
        soundhandle.say('hello')
        sleep(1)
        soundhandle.say(s)
        #soundhandle.playWave('/home/turtlebot/Desktop/baxter_aug_event/hello.wav')
        #sleep(2)
        limb.move_to_joint_positions(rightArmUpALittlePose)
        sleep(3)

      if (not rospy.is_shutdown()):
        print 'get a bag'
        baxter_interface.Head().set_pan(-0.9)
        #sleep(2)
        limb.move_to_joint_positions(rightArmSidePose)
        #sleep(5)
        soundhandle.say('May I have a bag, please?')
        #soundhandle.playWave('/home/turtlebot/Desktop/baxter_aug_event/can_I_have_a_bag_please.wav')
        #sleep(2)
        #waits until the button on the robot is pressed, just in case
      while ((not rospy.is_shutdown()) and (b.state==0)):
        print '.'
        r.sleep()

      if (not rospy.is_shutdown()):
        print 'bye'
        baxter_interface.Head().set_pan(0.0)
        #sleep(2)
        limb.move_to_joint_positions(rightArmFrontOfferingPose)
        #sleep(5)
        soundhandle.say('There you go, have a good day!')
        #soundhandle.playWave('/home/turtlebot/Desktop/baxter_aug_event/there_you_go.wav')
        sleep(5)
        #while (b.state==0):
        #  print '.'
        #  r.sleep()

      if (not rospy.is_shutdown()):
        print 'back to waiting'
        limb.move_to_joint_positions(rightArmNeutralPose)
        sleep(5)
        pub.publish(neutralFace)
        #write table we have finished
        f=open('/home/turtlebot/messagesFromTable','w')
        s=f.write('0')
        f.close()
        s = '0'
        sleep(1)

    if (rospy.is_shutdown()):
      print 'ros has been shut down. bye!'      

'''

if __name__== '__main__':

    	print '-------------------------------------'
    	print '-Baxter ridgeback simple demo python-'
    	print '-   DEC 2016, HH, Martin            -'
    	print '-------------------------------------'

	try:
		listener()
	except rospy.ROSInterruptException:
		pass
	finally:
		pass
		#pi2go.cleanup()
		#running=False
		#time.sleep(0.25)
		#GPIO.cleanup()
