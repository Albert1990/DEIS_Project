#!/usr/bin/env python
#
#Copyright (c) 2017, Martin Cooney
#All rights reserved.
#THIS SOFTWARE IS PROVIDED "AS IS".
#IN NO EVENT WILL THE COPYRIGHT OWNER BE LIABLE FOR ANY DAMAGES
#ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE.
 
import rospy
from std_msgs.msg import String
from sensor_msgs.msg import Image
import cv2
import cv_bridge
from cv_bridge import CvBridgeError
import argparse
import time
import numpy as np



def image_callback(data):
    #rospy.loginfo("Received image") #use this for debugging
    try:
	cv_image= cv_bridge.CvBridge().imgmsg_to_cv2(data, "bgr8")
	cv2.imshow('my_image_feed', cv_image)
	#cv2.imwrite("/home/turtlebot/catkin_ws/src/gps_server/scripts/can.png",cv_image)
	#image1 = cv2.resize("can.png",(160,160))
 	#cv2.imshow("Image1",image1)
        image()
	
	cv2.waitKey(10)
        
    except CvBridgeError as e:
	print(e)
def image():
    greenLower = (50,50,110)
    greenUpper = (255, 255, 130)
    a=1
    print(a)
    # load the image, convert it to grayscale, blur it slightly,
    # and threshold it
    #image = cv2.imread(args["image"])

    image_original = cv2.imread("current.jpg",1)
   # cv2.imshow("san",image_original)
    hsv = cv2.resize(image_original, (640,480))


    #hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # construct a mask for the color "green", then perform
    # a series of dilations and erosions to remove any small
    # blobs left in the mask
    mask = cv2.inRange(hsv, greenLower, greenUpper)
    mask = cv2.erode(mask, None, iterations=2)
    mask = cv2.dilate(mask, None, iterations=2)
    cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
		cv2.CHAIN_APPROX_SIMPLE)[-2]
    center = None
    if len(cnts) > 0:
        # find the largest contour in the mask, then use
        # it to compute the minimum enclosing circle and    
        # centroid
        c = max(cnts, key=cv2.contourArea)
        ((x, y), radius) = cv2.minEnclosingCircle(c)
        M = cv2.moments(c)
        center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))
        abhi_area = cv2.contourArea(c)
        print(abhi_area)
    
        if abhi_area > 1:
            pixel_x = int(M["m10"]/M["m00"])
	    pixel_y = int(M["m01"]/M["m00"])

	    pos_x =  pixel_x*(1950/640) 
	    pos_y = 1550- pixel_y*(1550/480)
	    print(pos_x)
	    print(pos_y)
    
        cv2.drawContours(hsv, [c], -1, (0, 255, 0), 2)
        cv2.circle(hsv, (pixel_x, pixel_y), 2, (255, 255, 255), -1)
        cv2.putText(hsv, "center", ( pixel_x, pixel_y),
        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

	
    cv2.imshow("Image",hsv)

    cv2.waitKey(0)

def listener():

    rospy.init_node('exampleGPSClient', anonymous=True)
    rospy.Subscriber("gps_channel", Image, image_callback)
    rospy.spin()

if __name__ == '__main__':
    listener()
   # image()
